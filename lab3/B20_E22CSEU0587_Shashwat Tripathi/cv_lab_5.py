# -*- coding: utf-8 -*-
"""CV lab 5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iMZs-Rb75bLJA8KNn3L6Uu9l2LD7M7z4

###TASK 1
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc
import seaborn as sns
from google.colab.patches import cv2_imshow

# Task 1: Image Compression

def compress_image(image_path, output_path, quality=50, format='JPEG'):
    # Check if the image was loaded successfully
    image = cv2.imread(image_path)
    if image is None:
        print(f"Error: Could not load image from {image_path}. Check the file path.")
        return  # Exit the function if image loading failed

    cv2.imwrite(output_path, image, [cv2.IMWRITE_JPEG_QUALITY if format == 'JPEG' else cv2.IMWRITE_PNG_COMPRESSION, quality])
    compressed_image = cv2.imread(output_path)
    compressed_image = cv2.cvtColor(compressed_image, cv2.COLOR_BGR2RGB)
    plt.imshow(compressed_image)
    plt.title(f"Compressed Image - {format}")
    plt.axis('off')
    plt.show()
    print(f"Image saved at {output_path} with quality {quality}")

compress_image('CV lab5 pic.jpg', 'compressed.jpg', quality=50, format='JPEG')
compress_image('CV lab5 pic.jpg', 'compressed.png', quality=9, format='PNG')

"""###TASK 2"""

def train_mnist():
    (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()
    x_train = x_train.reshape(-1, 28, 28, 1) / 255.0
    x_test = x_test.reshape(-1, 28, 28, 1) / 255.0
    y_train = to_categorical(y_train, 10)
    y_test = to_categorical(y_test, 10)

    model = Sequential([
        Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
        MaxPooling2D((2,2)),
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D((2,2)),
        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),
        Dense(10, activation='softmax')
    ])

    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=50, batch_size=64)

    y_pred = model.predict(x_test)
    y_pred_classes = np.argmax(y_pred, axis=1)
    y_true_classes = np.argmax(y_test, axis=1)
    print(classification_report(y_true_classes, y_pred_classes))

    # Confusion Matrix
    cm = confusion_matrix(y_true_classes, y_pred_classes)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.show()
    return model

def train_cifar10():
    (x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()
    x_train, x_test = x_train / 255.0, x_test / 255.0
    y_train, y_test = to_categorical(y_train, 10), to_categorical(y_test, 10)

    model = Sequential([
        Conv2D(32, (3,3), activation='relu', input_shape=(32,32,3)),
        MaxPooling2D((2,2)),
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D((2,2)),
        Conv2D(128, (3,3), activation='relu'),
        MaxPooling2D((2,2)),
        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),
        Dense(10, activation='softmax')
    ])

    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=50, batch_size=64)

    y_pred = model.predict(x_test)
    y_pred_classes = np.argmax(y_pred, axis=1)
    y_true_classes = np.argmax(y_test, axis=1)
    print(classification_report(y_true_classes, y_pred_classes))

    # Confusion Matrix
    cm = confusion_matrix(y_true_classes, y_pred_classes)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.show()

    return model

model_mnist = train_mnist()
 model_cifar10 = train_cifar10()

