# -*- coding: utf-8 -*-
"""E22CSEU0029_Lab-3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bK8RwShVGr65yz2p49xSiYoh3O_WBJb_
"""

import cv2
from google.colab.patches import cv2_imshow
image = cv2.imread('/content/pexels-cristian-rojas-6836442.jpg')
cv2_imshow(image)

height, width, channels = image.shape
print(f"Image Dimensions: Width={width}, Height={height}, Channels={channels}")

total_pixels = height * width * channels
print(f"Total number of pixels: {total_pixels}")

grayscale_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(grayscale_image)
print(f"Grayscale Image Dimensions: {grayscale_image.shape}")

import numpy as np
grayscale_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
threshold_value = 128
_, binary_image = cv2.threshold(grayscale_image, threshold_value, 255, cv2.THRESH_BINARY)
print("Binary Image:")
cv2_imshow(binary_image)
black_pixel_area = np.sum(binary_image == 0)
image_size = binary_image.size

print("Black Pixel Area:", black_pixel_area)
print("Image Size (Total Pixels):", image_size)

sobel_x = cv2.Sobel(grayscale_image, cv2.CV_64F, 1, 0, ksize=3)
sobel_y = cv2.Sobel(grayscale_image, cv2.CV_64F, 0, 1, ksize=3)


sobel_combined = cv2.magnitude(sobel_x, sobel_y)

sobel_combined = cv2.convertScaleAbs(sobel_combined)

print("Sobel X:")
cv2_imshow(cv2.convertScaleAbs(sobel_x))

print("Sobel Y:")
cv2_imshow(cv2.convertScaleAbs(sobel_y))

print("Combined Sobel Edge Detection:")
cv2_imshow(sobel_combined)

prewitt_x = np.array([[1, 0, -1], [1, 0, -1], [1, 0, -1]])
prewitt_y = np.array([[1, 1, 1], [0, 0, 0], [-1, -1, -1]])

edge_x = cv2.filter2D(grayscale_image, -1, prewitt_x)
edge_y = cv2.filter2D(grayscale_image, -1, prewitt_y)


prewitt_combined = cv2.magnitude(edge_x.astype(float), edge_y.astype(float))
prewitt_combined = cv2.convertScaleAbs(prewitt_combined)

print("Prewitt X Edge Detection:")
cv2_imshow(edge_x)

print("Prewitt Y Edge Detection:")
cv2_imshow(edge_y)

print("Combined Prewitt Edge Detection:")
cv2_imshow(prewitt_combined)

roberts_cross_x = np.array([[1, 0], [0, -1]])
roberts_cross_y = np.array([[0, 1], [-1, 0]])

edge_x = cv2.filter2D(grayscale_image, -1, roberts_cross_x)
edge_y = cv2.filter2D(grayscale_image, -1, roberts_cross_y)

roberts_combined = cv2.magnitude(edge_x.astype(float), edge_y.astype(float))
roberts_combined = cv2.convertScaleAbs(roberts_combined)

print("Roberts Cross X Edge Detection:")
cv2_imshow(edge_x)

print("Roberts Cross Y Edge Detection:")
cv2_imshow(edge_y)

print("Combined Roberts Cross Edge Detection:")
cv2_imshow(roberts_combined)

sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)

edges_combined = cv2.magnitude(sobel_x, sobel_y)
edges_combined = cv2.convertScaleAbs(edges_combined)

edges_canny = cv2.Canny(image, 100, 200)

print("Canny Edge Detection:")
cv2_imshow(edges_canny)

print("Sobel X Edge Detection:")
cv2_imshow(cv2.convertScaleAbs(sobel_x))

print("Sobel Y Edge Detection:")
cv2_imshow(cv2.convertScaleAbs(sobel_y))

print("Combined Sobel Edge Detection (Magnitude):")
cv2_imshow(edges_combined)

sobel_x = cv2.Sobel(grayscale_image, cv2.CV_64F, 1, 0, ksize=3)
sobel_y = cv2.Sobel(grayscale_image, cv2.CV_64F, 0, 1, ksize=3)

sobel_combined = cv2.magnitude(sobel_x, sobel_y)
sobel_combined = cv2.convertScaleAbs(sobel_combined)

_, segmented_x = cv2.threshold(cv2.convertScaleAbs(sobel_x), 127, 255, cv2.THRESH_BINARY)
_, segmented_y = cv2.threshold(cv2.convertScaleAbs(sobel_y), 127, 255, cv2.THRESH_BINARY)
_, segmented_combined = cv2.threshold(sobel_combined, 127, 255, cv2.THRESH_BINARY)

print("Global Thresholding - Sobel X Segmentation:")
cv2_imshow(segmented_x)

print("Global Thresholding - Sobel Y Segmentation:")
cv2_imshow(segmented_y)

print("Global Thresholding - Combined Sobel Segmentation:")
cv2_imshow(segmented_combined)

sobel_x = cv2.Sobel(grayscale_image, cv2.CV_64F, 1, 0, ksize=3)
sobel_y = cv2.Sobel(grayscale_image, cv2.CV_64F, 0, 1, ksize=3)

sobel_combined = cv2.magnitude(sobel_x, sobel_y)
sobel_combined = cv2.convertScaleAbs(sobel_combined)

adaptive_x = cv2.adaptiveThreshold(cv2.convertScaleAbs(sobel_x), 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2)
adaptive_y = cv2.adaptiveThreshold(cv2.convertScaleAbs(sobel_y), 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2)
adaptive_combined = cv2.adaptiveThreshold(sobel_combined, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2)

print("Adaptive Thresholding - Sobel X Segmentation:")
cv2_imshow(adaptive_x)

print("Adaptive Thresholding - Sobel Y Segmentation:")
cv2_imshow(adaptive_y)

print("Adaptive Thresholding - Combined Sobel Segmentation:")
cv2_imshow(adaptive_combined)

sobel_x = cv2.Sobel(grayscale_image, cv2.CV_64F, 1, 0, ksize=3)
sobel_y = cv2.Sobel(grayscale_image, cv2.CV_64F, 0, 1, ksize=3)

sobel_combined = cv2.magnitude(sobel_x, sobel_y)
sobel_combined = cv2.convertScaleAbs(sobel_combined)

edges_x = cv2.Canny(cv2.convertScaleAbs(sobel_x), 100, 200)
edges_y = cv2.Canny(cv2.convertScaleAbs(sobel_y), 100, 200)
edges_combined = cv2.Canny(sobel_combined, 100, 200)

print("Canny Edge Detection - Sobel X Segmentation:")
cv2_imshow(edges_x)

print("Canny Edge Detection - Sobel Y Segmentation:")
cv2_imshow(edges_y)

print("Canny Edge Detection - Combined Sobel Segmentation:")
cv2_imshow(edges_combined)

grayscale_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
gray = grayscale_image

sobel_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
sobel_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)

sobel_combined = cv2.magnitude(sobel_x, sobel_y)
sobel_combined = cv2.convertScaleAbs(sobel_combined)

_, thresh = cv2.threshold(sobel_combined, 50, 255, cv2.THRESH_BINARY_INV)

kernel = np.ones((3, 3), np.uint8)
sure_bg = cv2.dilate(thresh, kernel, iterations=3)

dist_transform = cv2.distanceTransform(thresh, cv2.DIST_L2, 5)
_, sure_fg = cv2.threshold(dist_transform, 0.7 * dist_transform.max(), 255, 0)

sure_fg = np.uint8(sure_fg)
unknown = cv2.subtract(sure_bg, sure_fg)

_, markers = cv2.connectedComponents(sure_fg)

markers = markers + 1
markers[unknown == 255] = 0

cv2.watershed(image, markers)

image[markers == -1] = [0, 0, 255]

cv2_imshow(image)

