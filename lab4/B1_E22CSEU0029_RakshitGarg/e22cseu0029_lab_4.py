# -*- coding: utf-8 -*-
"""E22CSEU0029_Lab-4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y5hGe8LzF78wydkOfhGhg-71M4SoOpLZ
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
import matplotlib.pyplot as plt

color_img = cv2.imread('/content/pic.jpg')
color_img = cv2.cvtColor(color_img, cv2.COLOR_BGR2RGB)
gray_img = cv2.imread('/content/pic.jpg', cv2.IMREAD_GRAYSCALE)

cv2_imshow(cv2.cvtColor(color_img, cv2.COLOR_RGB2BGR))
cv2_imshow(gray_img)

gray_hist = cv2.calcHist([gray_img], [0], None, [256], [0, 256])
plt.figure(figsize=(8, 4))
plt.plot(gray_hist, color='gray')
plt.title("Grayscale Image Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")
plt.show()

red_hist = cv2.calcHist([color_img], [0], None, [256], [0, 256])
green_hist = cv2.calcHist([color_img], [1], None, [256], [0, 256])
blue_hist = cv2.calcHist([color_img], [2], None, [256], [0, 256])

plt.figure(figsize=(8, 4))
plt.plot(red_hist, color='red', label="Red Channel")
plt.plot(green_hist, color='green', label="Green Channel")
plt.plot(blue_hist, color='blue', label="Blue Channel")
plt.title("Color Image Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")
plt.legend()
plt.show()

converted_gray = cv2.cvtColor(color_img, cv2.COLOR_RGB2GRAY)
converted_gray_hist = cv2.calcHist([converted_gray], [0], None, [256], [0, 256])

plt.figure(figsize=(8, 4))
plt.plot(converted_gray_hist, color='gray')
plt.title("Converted Grayscale Image Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")
plt.show()

color_img = cv2.imread('/content/pic.jpg')
color_img = cv2.cvtColor(color_img, cv2.COLOR_BGR2RGB)
gray_img = cv2.imread('/content/pic.jpg', cv2.IMREAD_GRAYSCALE)

gray_hist = cv2.calcHist([gray_img], [0], None, [256], [0, 256])
red_hist = cv2.calcHist([color_img], [0], None, [256], [0, 256])
green_hist = cv2.calcHist([color_img], [1], None, [256], [0, 256])
blue_hist = cv2.calcHist([color_img], [2], None, [256], [0, 256])

plt.figure(figsize=(8, 4))
plt.plot(gray_hist, color='gray')
plt.title("Grayscale Histogram (M1)")
plt.xlabel("Intensity Values")
plt.ylabel("Number of Pixels")
plt.show()

plt.figure(figsize=(8, 4))
plt.plot(red_hist, color='red', label="Red Channel")
plt.plot(green_hist, color='green', label="Green Channel")
plt.plot(blue_hist, color='blue', label="Blue Channel")
plt.title("Color Histogram (M1)")
plt.xlabel("Intensity Values")
plt.ylabel("Number of Pixels")
plt.legend()
plt.show()

gray_hist_normalized = gray_hist / np.sum(gray_hist)
red_hist_normalized = red_hist / np.sum(red_hist)
green_hist_normalized = green_hist / np.sum(green_hist)
blue_hist_normalized = blue_hist / np.sum(blue_hist)

plt.figure(figsize=(8, 4))
plt.plot(gray_hist_normalized, color='gray')
plt.title("Grayscale Histogram (M2 - Probability)")
plt.xlabel("Intensity Values")
plt.ylabel("Probability of Occurrence")
plt.show()

plt.figure(figsize=(8, 4))
plt.plot(red_hist_normalized, color='red', label="Red Channel")
plt.plot(green_hist_normalized, color='green', label="Green Channel")
plt.plot(blue_hist_normalized, color='blue', label="Blue Channel")
plt.title("Color Histogram (M2 - Probability)")
plt.xlabel("Intensity Values")
plt.ylabel("Probability of Occurrence")
plt.legend()
plt.show()

gray_img = cv2.imread('/content/pic.jpg', cv2.IMREAD_GRAYSCALE)
bright_img = cv2.add(gray_img, 50)
dark_img = cv2.subtract(gray_img, 50)

plt.figure(figsize=(12, 4))
plt.subplot(1, 3, 1)
gray_hist = cv2.calcHist([gray_img], [0], None, [256], [0, 256])
plt.plot(gray_hist, color='gray')
plt.title("Original Grayscale Histogram")
plt.xlabel("Intensity Values")
plt.ylabel("Number of Pixels")

plt.subplot(1, 3, 2)
bright_hist = cv2.calcHist([bright_img], [0], None, [256], [0, 256])
plt.plot(bright_hist, color='gray')
plt.title("Bright Grayscale Histogram")
plt.xlabel("Intensity Values")

plt.subplot(1, 3, 3)
dark_hist = cv2.calcHist([dark_img], [0], None, [256], [0, 256])
plt.plot(dark_hist, color='gray')
plt.title("Dark Grayscale Histogram")
plt.xlabel("Intensity Values")

plt.tight_layout()
plt.show()

gray_img = cv2.imread('/content/pic.jpg', cv2.IMREAD_GRAYSCALE)
equalized_img = cv2.equalizeHist(gray_img)

print("Original Grayscale Image:")
cv2_imshow(gray_img)

print("Equalized Grayscale Image:")
cv2_imshow(equalized_img)

plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
original_hist = cv2.calcHist([gray_img], [0], None, [256], [0, 256])
plt.plot(original_hist, color='gray')
plt.title("Original Histogram")
plt.xlabel("Intensity Values")
plt.ylabel("Number of Pixels")
plt.subplot(1, 2, 2)
equalized_hist = cv2.calcHist([equalized_img], [0], None, [256], [0, 256])
plt.plot(equalized_hist, color='gray')
plt.title("Equalized Histogram")
plt.xlabel("Intensity Values")
plt.ylabel("Number of Pixels")

plt.tight_layout()
plt.show()

gray_img = cv2.imread('/content/pic.jpg', cv2.IMREAD_GRAYSCALE)
cv2_imshow(gray_img)

dft = np.fft.fft2(gray_img)
dft_shift = np.fft.fftshift(dft)
magnitude_spectrum = 20 * np.log(np.abs(dft_shift) + 1)

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1), plt.imshow(gray_img, cmap='gray')
plt.title("Original Grayscale Image"), plt.axis('off')

plt.subplot(1, 2, 2), plt.imshow(magnitude_spectrum, cmap='gray')
plt.title("Magnitude Spectrum"), plt.axis('off')

plt.show()

gray_img = cv2.imread('/content/pic.jpg', cv2.IMREAD_GRAYSCALE)

dft = np.fft.fft2(gray_img)
dft_shift = np.fft.fftshift(dft)
magnitude_spectrum = 20 * np.log(np.abs(dft_shift) + 1)

dft_ishift = np.fft.ifftshift(dft_shift)
reconstructed_img = np.fft.ifft2(dft_ishift)
reconstructed_img = np.abs(reconstructed_img)

plt.figure(figsize=(20, 20))

plt.subplot(1, 3, 1)
plt.imshow(gray_img, cmap='gray')
plt.title("Original Grayscale Image")
plt.axis('off')

plt.subplot(1, 3, 2)
plt.imshow(magnitude_spectrum, cmap='gray')
plt.title("Magnitude Spectrum")
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(reconstructed_img, cmap='gray')
plt.title("Reconstructed Image")
plt.axis('off')

plt.show()

gray_img = cv2.imread('/content/pic.jpg', cv2.IMREAD_GRAYSCALE)

dft = np.fft.fft2(gray_img)
dft_shift = np.fft.fftshift(dft)
magnitude_spectrum_original = 20 * np.log(np.abs(dft_shift) + 1)

rows, cols = gray_img.shape
rotation_matrix = cv2.getRotationMatrix2D((cols / 2, rows / 2), 45, 1)
rotated_img = cv2.warpAffine(gray_img, rotation_matrix, (cols, rows))

dft_rotated = np.fft.fft2(rotated_img)
dft_shift_rotated = np.fft.fftshift(dft_rotated)
magnitude_spectrum_rotated = 20 * np.log(np.abs(dft_shift_rotated) + 1)

plt.figure(figsize=(15, 5))

plt.subplot(2, 2, 1)
plt.imshow(gray_img, cmap='gray')
plt.title("Original Image")
plt.axis('off')

plt.subplot(2, 2, 2)
plt.imshow(magnitude_spectrum_original, cmap='gray')
plt.title("Magnitude Spectrum (Original)")
plt.axis('off')

plt.subplot(2, 2, 3)
plt.imshow(rotated_img, cmap='gray')
plt.title("Rotated Image (45 Degrees)")
plt.axis('off')

plt.subplot(2, 2, 4)
plt.imshow(magnitude_spectrum_rotated, cmap='gray')
plt.title("Magnitude Spectrum (Rotated)")
plt.axis('off')

plt.show()

